name: Build and Test
on:
  pull_request:
    branches:
      - master
    paths:
      - "**/Dockerfile"
      - "**/entrypoint.sh"
      - ".github/workflows/test.yml"
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sundays at 02:00
  workflow_dispatch:

env:
  DOCKER_USERNAME: tiryoh
  DOCKER_IMAGENAME: ros2-desktop-vnc

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        ros-distro: [foxy, humble, iron, rolling]
        arch: [arm64, amd64]
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
    # clean space config is based on the following configuration
    # https://github.com/PINTO0309/onnx2tf/blob/main/.github/workflows/test-models.yml
    # MIT License, Copyright (c) 2022 Katsuya Hyodo
    - name: Check space before cleanup
      run: df -h
    - name: Clean space
      run: |
          docker images
          sudo rm -rf "/opt/*" || true
          sudo rm -rf "/usr/share/dotnet" || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo rm -rf "/usr/local/lib/android" || true
          sudo rm -rf "/usr/local/share/boost" || true
          sudo rm -rf "/usr/lib/jvm" || true
          sudo rm -rf "/usr/share/swift" || true
          sudo rm -rf "/usr/local/julia*" || true
          sudo rm -rf "/usr/share/kotlinc" || true
          sudo rm -rf "/usr/local/share/edge_driver" || true
          sudo rm -rf "/usr/local/share/chromedriver-linux64" || true
          sudo rm -rf "/usr/local/share/gecko_driver" || true
          sudo rm -rf "/usr/share/miniconda" || true
          sudo rm -rf "/usr/local/share/phantomjs*" || true
          sudo rm -rf "/usr/share/sbt" || true
          sudo rm -rf "/usr/local/sqlpackage" || true
          docker rmi $(docker image ls -q --filter "reference=node*")
          docker rmi $(docker image ls -q --filter "reference=buildpack*")
          docker rmi $(docker image ls -q --filter "reference=debian*")
          docker rmi $(docker image ls -q --filter "reference=alpine*")
          docker rmi $(docker image ls -q --filter "reference=ubuntu:18.04")
          docker rmi $(docker image ls -q --filter "reference=ubuntu:20.04")
          sudo npm uninstall bazel
          rustup self uninstall -y
          sudo apt purge \
            ansible \
            apache2 \
            aria2 \
            azure-cli \
            cabal* \
            clang* \
            dotnet-sdk* \
            firefox \
            ghc* \
            google-chrome-stable \
            google-cloud-sdk \
            kubectl \
            libpq-dev \
            microsoft-edge-stable \
            moby-buildx \
            moby-cli \
            moby-compose \
            moby-engine \
            mongodb* \
            mono-complete \
            mysql* \
            nginx \
            node* \
            npm* \
            nuget \
            php* \
            postgresql* \
            powershell \
            r-base \
            rpm \
            ruby* \
            sphinxsearch \
            subversion \
            yarn \
            -yq >/dev/null 2>&1 || true
          sudo apt-get autoremove -y >/dev/null 2>&1 || true
          sudo apt-get autoclean -y >/dev/null 2>&1 || true
          df -h

      - uses: actions/checkout@v3

      - uses: docker/setup-qemu-action@v2

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGENAME }}
          tags: |
            type=raw,value=${{ matrix.ros-distro }}-${{ matrix.arch }}-{{date 'YYYYMMDDTHHmm'}}
            type=raw,value=${{ matrix.ros-distro }}-${{ matrix.arch }}
          flavor: |
            latest=false
            prefix=
            suffix=

      - name: Parse docker build option
        id: docker-build-option
        run: |
          LABELS=$(cat << EOF | grep -E "=." | sed -e "s/org\./--label org./g" | sed -e "s/--label org\(.*\)=\(.*\)$/--label org\1='\2'/g"
          ${{ steps.meta.outputs.labels }}
          EOF
          )
          echo $LABELS
          echo "labels=${LABELS}" >> $GITHUB_OUTPUT

      - name: Build docker image
        env:
          DOCKER_TAGNAME: ${{ matrix.ros-distro }}-${{ matrix.arch }}
        run: |
          if [[ -d ${DOCKER_TAGNAME%-amd64} ]]; then
              cd ${DOCKER_TAGNAME%-amd64} && docker buildx build  --no-cache --platform=linux/${{ matrix.arch }} --progress=plain ${{ steps.docker-build-option.outputs.labels }} -t $DOCKER_USERNAME/$DOCKER_IMAGENAME:$DOCKER_TAGNAME .
          elif [[ -d ${DOCKER_TAGNAME%-arm64} ]]; then
              cd ${DOCKER_TAGNAME%-arm64} && docker buildx build  --no-cache --platform=linux/${{ matrix.arch }} --progress=plain ${{ steps.docker-build-option.outputs.labels }} -t $DOCKER_USERNAME/$DOCKER_IMAGENAME:$DOCKER_TAGNAME .
          else
              exit 1
          fi

      - name: List docker images
        run: |
          mkdir -p build_log
          docker image ls "$DOCKER_USERNAME/*" | tee ./build_log/docker_images.txt

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGENAME }}:${{ matrix.ros-distro }}-${{ matrix.arch }}'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          timeout: '20m'

      - name: Cleanup docker image cache
        env:
          DOCKER_TAGNAME: ${{ matrix.ros-distro }}-${{ matrix.arch }}
        run: |
            docker rmi $DOCKER_USERNAME/$DOCKER_IMAGENAME:$DOCKER_TAGNAME

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true
